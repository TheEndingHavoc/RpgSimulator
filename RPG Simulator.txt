-- Load Fluent and Addons
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Services
local VirtualInputManager = game:GetService("VirtualInputManager")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")

-- Player setup
local player = Players.LocalPlayer
local currentHRP = nil -- Will track current HumanoidRootPart

-- GitHub URL for the script (replace with your actual GitHub URL)
local SCRIPT_URL = "https://raw.githubusercontent.com/TheEndingHavoc/RpgSimulator/refs/heads/main/RPG%20Simulator.txt"

-- Check for existing GUI and destroy it
if CoreGui:FindFirstChild("RPGSimulatorProWindow") then
    CoreGui.RPGSimulatorProWindow:Destroy()
end

-- Create the window
local Window = Fluent:CreateWindow({
    Title = "RPG Simulator Pro",
    SubTitle = "Respawn-Proof Auto Farm",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Name the window for identification
Window.Name = "RPGSimulatorProWindow"
Window.Parent = CoreGui

-- Tabs
local Tabs = {
    AutoSkills = Window:AddTab({ Title = "Auto Skills", Icon = "sword" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "anchor" }),
    AutoRaid = Window:AddTab({ Title = "Auto Raid", Icon = "skull" }),
    Quests = Window:AddTab({ Title = "Quests", Icon = "book" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Shared variables
local isAutoSkillsEnabled = false
local selectedKeys = {Q = true, E = true, R = true}
local keySequence = {"Q", "E", "R"}
local currentKeyIndex = 1

-- Auto Click variables
local isAutoClickEnabled = false
local clickDelay = 0.1

-- Auto Farm variables
local isAutoFarmEnabled = false
local useSkillsWhileFarming = true
local farmDelay = 0.5
local currentTarget = nil
local mobTypes = {}
local selectedMobType = nil
local farmingThread = nil

-- Auto Raid variables
local raidOptions = {
    "Pirate Captain", "Obsidian Lair", "Deep Water Den", "Shadow Palace", 
    "Sun Warrior Temple F2", "Laboratory 1", "Crystal Caverns", "Rogue Hideout", 
    "Nest of the Colossal", "Tartarus", "Doctor V's Labyrinth", "Hive", 
    "Realm of Shadows", "The Rune King", "Mines", "Frost Dragon", 
    "Dungeon Endless", "Emperor of Time", "Frost Dragon's Rematch"
}
local selectedRaid = nil
local isHardcoreRaid = false
local isAutoRaidEnabled = false
local raidThread = nil
local currentRaidTarget = nil
local useSkillsWhileRaiding = true

-- Auto Execute variables
local isAutoExecuteEnabled = false
local autoExecuteGui = Instance.new("ScreenGui")
autoExecuteGui.Name = "AutoExecuteGUI"
autoExecuteGui.Parent = CoreGui

-- Auto Quest variables
local autoQuestThreads = {}
local autoQuestStates = {}

-- Permanent noclip function
local function setNoClip(enabled)
    if not currentHRP or not currentHRP.Parent then return end
    for _, part in ipairs(currentHRP.Parent:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = not enabled
        end
    end
end

-- Character management
local function trackCharacter(newCharacter)
    -- Wait for HumanoidRootPart to exist
    local hrp = newCharacter:WaitForChild("HumanoidRootPart")
    currentHRP = hrp
    
    -- Set up death detection
    local humanoid = newCharacter:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        if isAutoFarmEnabled then
            player.CharacterAdded:Wait()
            task.wait(3)
            if isAutoFarmEnabled then
                startFarming()
            end
        end
        if isAutoRaidEnabled then
            player.CharacterAdded:Wait()
            task.wait(3)
            if isAutoRaidEnabled then
                startRaid()
            end
        end
    end)
    
    if isAutoFarmEnabled then
        setNoClip(true)
        startFarming()
    end
    if isAutoRaidEnabled then
        setNoClip(true)
        startRaid()
    end
end

if player.Character then
    trackCharacter(player.Character)
end
player.CharacterAdded:Connect(trackCharacter)

-- Mob detection function
local function getMobTypes()
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if not mobsFolder then return {} end
    
    local types = {}
    for _, mob in ipairs(mobsFolder:GetChildren()) do
        if mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChildOfClass("Humanoid") and mob.Humanoid.Health > 0 then
            if not table.find(types, mob.Name) then
                table.insert(types, mob.Name)
            end
        end
    end
    return types
end

-- Quest detection function
local function getQuestNPCs()
    local questFolder = workspace:FindFirstChild("QuestNPCs")
    if not questFolder then
        Fluent:Notify({
            Title = "Quest Detection",
            Content = "QuestNPCs folder not found in workspace!",
            Duration = 5
        })
        return {}
    end
    
    local npcs = {}
    for _, npc in ipairs(questFolder:GetChildren()) do
        local questIdValue = npc:FindFirstChild("QuestId")
        if questIdValue and questIdValue:IsA("StringValue") then
            local questId = questIdValue.Value
            if questId and questId ~= "" then
                table.insert(npcs, { Name = npc.Name, QuestId = questId })
            else
                Fluent:Notify({
                    Title = "Quest Detection",
                    Content = "Empty QuestId for NPC: " .. npc.Name,
                    Duration = 5
                })
            end
        else
            Fluent:Notify({
                Title = "Quest Detection",
                Content = "No QuestId found for NPC: " .. npc.Name,
                Duration = 5
            })
        end
    end
    return npcs
end

-- Key press simulation
local function simulateKeyPress(key)
    local keyCodes = {
        Q = Enum.KeyCode.Q,
        E = Enum.KeyCode.E,
        R = Enum.KeyCode.R
    }
    
    if keyCodes[key] then
        VirtualInputManager:SendKeyEvent(true, keyCodes[key], false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, keyCodes[key], false, game)
    end
end

-- Mouse click simulation
local function simulateMouseClick()
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    task.wait(0.05)
    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
end

-- Find mob of selected type
local function findMob()
    if not currentHRP or not currentHRP.Parent then return nil end
    if not selectedMobType then return nil end
    
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if not mobsFolder then return nil end
    
    local closestMob = nil
    local closestDistance = math.huge
    
    for _, mob in ipairs(mobsFolder:GetChildren()) do
        if mob.Name == selectedMobType and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChildOfClass("Humanoid") and mob.Humanoid.Health > 0 then
            local distance = (mob.HumanoidRootPart.Position - currentHRP.Position).Magnitude
            if distance < closestDistance then
                closestMob = mob
                closestDistance = distance
            end
        end
    end
    
    return closestMob
end

-- Precise teleport function
local function teleportToTarget(target)
    if not currentHRP or not currentHRP.Parent then return end
    
    local targetPos = target.HumanoidRootPart.Position
    currentHRP.CFrame = CFrame.new(targetPos)
    currentHRP.Velocity = Vector3.new(0, 0, 0)
    currentHRP.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
    
    RunService.Heartbeat:Wait()
end

-- Main farming function
local function farmLoop()
    while isAutoFarmEnabled do
        while not currentHRP or not currentHRP.Parent do
            task.wait(1)
        end
        
        local mob = findMob()
        if mob then
            currentTarget = mob
            teleportToTarget(mob)
            setNoClip(true)
            simulateMouseClick()
            if useSkillsWhileFarming then
                for _, key in ipairs(keySequence) do
                    if selectedKeys[key] then
                        simulateKeyPress(key)
                    end
                end
            end
        end
        
        task.wait(farmDelay)
    end
end

-- Start/stop farming functions
local function startFarming()
    if farmingThread then
        coroutine.close(farmingThread)
    end
    
    isAutoFarmEnabled = true
    setNoClip(true)
    farmingThread = coroutine.create(farmLoop)
    coroutine.resume(farmingThread)
    
    Fluent:Notify({
        Title = "Auto Farm",
        Content = "Enabled! Will survive respawns automatically.",
        Duration = 3
    })
end

local function stopFarming()
    isAutoFarmEnabled = false
    if farmingThread then
        coroutine.close(farmingThread)
        farmingThread = nil
    end
    setNoClip(false)
    currentTarget = nil
end

-- Auto Raid functions
local function getNil(name, class)
    for _, v in pairs(getnilinstances()) do
        if v.ClassName == class and v.Name == name then return v end
    end
end

local function teleportToRaid()
    if not selectedRaid then return end
    
    local args = {
        [1] = "Raid",
        [2] = selectedRaid,
        [3] = isHardcoreRaid
    }
    
    local raidEvent = getNil("raidEvent", "RemoteEvent") or 
                     game:GetService("ReplicatedStorage"):FindFirstChild("raidEvent") or
                     game:GetService("ReplicatedStorage").Events:FindFirstChild("raidEvent")
    
    if raidEvent then
        raidEvent:FireServer(unpack(args))
        Fluent:Notify({
            Title = "Raid Teleport",
            Content = "Teleporting to "..selectedRaid..(isHardcoreRaid and " (Hardcore)" or ""),
            Duration = 3
        })
    end
end

local function findClosestRaidMob()
    if not currentHRP or not currentHRP.Parent then return nil end
    
    local closestMob = nil
    local closestDistance = math.huge
    
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        for _, mob in ipairs(mobsFolder:GetChildren()) do
            if mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChildOfClass("Humanoid") and mob.Humanoid.Health > 0 then
                local distance = (mob.HumanoidRootPart.Position - currentHRP.Position).Magnitude
                if distance < closestDistance then
                    closestMob = mob
                    closestDistance = distance
                end
            end
        end
    end
    
    return closestMob
end

local function raidLoop()
    while isAutoRaidEnabled do
        while not currentHRP or not currentHRP.Parent do
            task.wait(0.5)
        end
        
        local mob = findClosestRaidMob()
        if mob then
            currentRaidTarget = mob
            
            local lastTeleport = 0
            while isAutoRaidEnabled and mob.Parent and mob:FindFirstChildOfClass("Humanoid") and mob.Humanoid.Health > 0 do
                local now = tick()
                
                if now - lastTeleport >= 0.5 then
                    teleportToTarget(mob)
                    setNoClip(true)
                    lastTeleport = now
                end
                
                autoClick()
                if useSkillsWhileRaiding then
                    for _, key in ipairs({"Q", "E", "R"}) do
                        simulateKeyPress(key)
                    end
                end
                
                task.wait(0.1)
            end
            
            task.wait(0.5)
        else
            task.wait(1)
        end
    end
end

local function startRaid()
    if raidThread then
        coroutine.close(raidThread)
    end
    
    isAutoRaidEnabled = true
    setNoClip(true)
    raidThread = coroutine.create(raidLoop)
    coroutine.resume(raidThread)
    
    Fluent:Notify({
        Title = "Auto Raid",
        Content = "Enabled! Will survive respawns automatically.",
        Duration = 3
    })
end

local function stopRaid()
    isAutoRaidEnabled = false
    if raidThread then
        coroutine.close(raidThread)
        raidThread = nil
    end
    setNoClip(false)
    currentRaidTarget = nil
end

-- Auto Skills function
local function keySpam()
    local currentKey = keySequence[currentKeyIndex]
    if selectedKeys[currentKey] then
        simulateKeyPress(currentKey)
    end
    
    currentKeyIndex = currentKeyIndex % #keySequence + 1
    task.wait(0.1)
end

-- Auto Click function
local function autoClick()
    simulateMouseClick()
    task.wait(clickDelay)
end

-- Auto Quest function
local function autoQuestLoop(questId)
    while autoQuestStates[questId] do
        while not currentHRP or not currentHRP.Parent do
            task.wait(1)
        end
        
        local args = {
            [1] = questId
        }
        local zoneQuest = game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("zoneQuest")
        if zoneQuest then
            local success, err = pcall(function()
                zoneQuest:FireServer(unpack(args))
            end)
            Fluent:Notify({
                Title = "Auto Quest Debug",
                Content = success and ("Fired quest ID: " .. tostring(questId)) or ("Failed to fire quest ID: " .. tostring(questId) .. " - " .. tostring(err)),
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Auto Quest Error",
                Content = "zoneQuest RemoteEvent not found!",
                Duration = 3
            })
        end
        
        task.wait(1) -- Delay to prevent server spam
    end
end

local function toggleAutoQuest(questId, enabled)
    autoQuestStates[questId] = enabled
    if enabled then
        if autoQuestThreads[questId] then
            coroutine.close(autoQuestThreads[questId])
        end
        autoQuestThreads[questId] = coroutine.create(function()
            autoQuestLoop(questId)
        end)
        coroutine.resume(autoQuestThreads[questId])
        Fluent:Notify({
            Title = "Auto Quest",
            Content = "Auto Quest for " .. tostring(questId) .. " enabled!",
            Duration = 3
        })
    else
        if autoQuestThreads[questId] then
            coroutine.close(autoQuestThreads[questId])
            autoQuestThreads[questId] = nil
        end
        Fluent:Notify({
            Title = "Auto Quest",
            Content = "Auto Quest for " .. tostring(questId) .. " disabled.",
            Duration = 3
        })
    end
end

-- Connections
local keyConnection, clickConnection

local function toggleKeySpam(enabled)
    isAutoSkillsEnabled = enabled
    if enabled then
        keyConnection = RunService.Heartbeat:Connect(keySpam)
    elseif keyConnection then
        keyConnection:Disconnect()
        keyConnection = nil
    end
end

local function toggleAutoClick(enabled)
    isAutoClickEnabled = enabled
    if enabled then
        clickConnection = RunService.Heartbeat:Connect(autoClick)
    elseif clickConnection then
        clickConnection:Disconnect()
        clickConnection = nil
    end
    Fluent:Notify({
        Title = "Auto Click",
        Content = enabled and "Enabled (Press F)" or "Disabled",
        Duration = 3
    })
end

local function toggleAutoFarm(enabled)
    if enabled then
        startFarming()
    else
        stopFarming()
    end
end

local function toggleAutoRaid(enabled)
    if enabled then
        startRaid()
    else
        stopRaid()
    end
end

-- Auto Execute Logic
local function executeMainScript()
    if player:FindFirstChild("ScriptExecuted") then
        return false -- Prevent duplicate execution in the same session
    end

    Fluent:Notify({
        Title = "Auto Execute",
        Content = "Main script executed on teleport!",
        Duration = 5
    })
    
    local tag = Instance.new("BoolValue")
    tag.Name = "ScriptExecuted"
    tag.Value = true
    tag.Parent = player
    
    return true
end

local function setupAutoExecute()
    if not autoExecuteGui:FindFirstChild("AutoExecuteEnabled") then
        local flag = Instance.new("BoolValue")
        flag.Name = "AutoExecuteEnabled"
        flag.Value = true
        flag.Parent = autoExecuteGui
    end
    
    if syn and syn.queue_on_teleport then
        syn.queue_on_teleport('loadstring(game:HttpGet("' .. SCRIPT_URL .. '"))()')
    elseif queue_on_teleport then
        queue_on_teleport('loadstring(game:HttpGet("' .. SCRIPT_URL .. '"))()')
    else
        Fluent:Notify({
            Title = "Auto Execute Error",
            Content = "Your executor does not support queue_on_teleport!",
            Duration = 5
        })
        return false
    end
    
    Fluent:Notify({
        Title = "Auto Execute",
        Content = "Enabled! Script will auto-execute on the next server.",
        Duration = 3
    })
    return executeMainScript()
end

local function checkAutoExecute()
    if autoExecuteGui:FindFirstChild("AutoExecuteEnabled") and autoExecuteGui.AutoExecuteEnabled.Value then
        local success = executeMainScript()
        if success then
            Fluent:Notify({
                Title = "Auto Execute",
                Content = "Script auto-executed successfully!",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Auto Execute",
                Content = "Failed to auto-execute script.",
                Duration = 3
            })
        end
    end
end

-- UI Setup with Error Handling and Delay
local function setupUI()
    -- Add a small delay to ensure Fluent is fully loaded
    task.wait(0.5)

    -- Auto Skills Tab
    pcall(function()
        Tabs.AutoSkills:AddToggle("AutoSkillsToggle", {
            Title = "Auto Skills",
            Description = "Spams Q, E, R in sequence",
            Default = false,
            Callback = toggleKeySpam
        })

        Tabs.AutoSkills:AddDropdown("KeyFilter", {
            Title = "Active Skills",
            Values = {"Q", "E", "R"},
            Multi = true,
            Default = {"Q", "E", "R"},
            Callback = function(values)
                selectedKeys = {Q = false, E = false, R = false}
                for value, state in pairs(values) do
                    if state then
                        selectedKeys[value] = true
                    end
                end
            end
        })

        Tabs.AutoSkills:AddToggle("AutoClickToggle", {
            Title = "Auto Click",
            Description = "Toggle with F key",
            Default = false,
            Callback = toggleAutoClick
        })

        Tabs.AutoSkills:AddSlider("ClickSpeedSlider", {
            Title = "Click Speed",
            Description = "Adjust auto click speed",
            Default = 0.1,
            Min = 0.05,
            Max = 1,
            Rounding = 2,
            Callback = function(value)
                clickDelay = value
            end
        })
    end)

    -- Auto Farm Tab
    pcall(function()
        Tabs.AutoFarm:AddToggle("AutoFarmToggle", {
            Title = "Enable Auto Farm",
            Description = "Survives respawns with perfect positioning",
            Default = false,
            Callback = toggleAutoFarm
        })

        Tabs.AutoFarm:AddToggle("UseSkills", {
            Title = "Use Skills While Farming",
            Default = true,
            Callback = function(value)
                useSkillsWhileFarming = value
            end
        })

        Tabs.AutoFarm:AddSlider("FarmDelay", {
            Title = "Action Delay",
            Description = "Delay between farming actions",
            Default = 0.5,
            Min = 0.1,
            Max = 2,
            Rounding = 1,
            Callback = function(value)
                farmDelay = value
            end
        })
    end)

    -- Auto Raid Tab
    pcall(function()
        Tabs.AutoRaid:AddDropdown("RaidSelection", {
            Title = "Raid Selection",
            Description = "Choose which raid to join",
            Values = raidOptions,
            Multi = false,
            Default = nil,
            Callback = function(value)
                selectedRaid = value
            end
        })

        Tabs.AutoRaid:AddToggle("HardcoreToggle", {
            Title = "Hardcore Mode",
            Default = false,
            Callback = function(value)
                isHardcoreRaid = value
            end
        })

        Tabs.AutoRaid:AddToggle("UseSkillsWhileRaiding", {
            Title = "Use Skills While Raiding",
            Default = true,
            Callback = function(value)
                useSkillsWhileRaiding = value
            end
        })

        Tabs.AutoRaid:AddButton({
            Title = "Teleport to Raid",
            Description = "Join the selected raid",
            Callback = teleportToRaid
        })

        Tabs.AutoRaid:AddToggle("AutoRaidToggle", {
            Title = "Auto Raid",
            Description = "Teleports every 0.5s & uses skills",
            Default = false,
            Callback = toggleAutoRaid
        })
    end)

    -- Quests Tab
    pcall(function()
        local questNPCs = {}
        local maxAttempts = 10
        local attempt = 1
        repeat
            questNPCs = getQuestNPCs()
            if #questNPCs == 0 then
                task.wait(1)
                attempt = attempt + 1
            end
        until #questNPCs > 0 or attempt > maxAttempts

        if #questNPCs == 0 then
            Tabs.Quests:AddParagraph({
                Title = "No Quests Found",
                Content = "No quest NPCs found in workspace.QuestNPCs after " .. maxAttempts .. " attempts."
            })
        else
            for _, npc in ipairs(questNPCs) do
                Tabs.Quests:AddToggle("AutoQuestToggle_" .. npc.Name, {
                    Title = "Auto Quest: " .. npc.Name,
                    Description = "Automatically runs quest ID: " .. tostring(npc.QuestId),
                    Default = false,
                    Callback = function(enabled)
                        toggleAutoQuest(npc.QuestId, enabled)
                    end
                })
            end
        end
    end)

    -- Settings Tab
    pcall(function()
        Tabs.Settings:AddToggle("AutoExecuteToggle", {
            Title = "Auto Execute on Teleport",
            Description = "Re-runs the script on the next server",
            Default = false,
            Callback = function(value)
                isAutoExecuteEnabled = value
                if value then
                    setupAutoExecute()
                else
                    if autoExecuteGui:FindFirstChild("AutoExecuteEnabled") then
                        autoExecuteGui.AutoExecuteEnabled.Value = false
                    end
                    Fluent:Notify({
                        Title = "Auto Execute",
                        Content = "Disabled.",
                        Duration = 3
                    })
                end
            end
        })

        -- SaveManager Configuration Section
        SaveManager:SetLibrary(Fluent)
        InterfaceManager:SetLibrary(Fluent)
        SaveManager:IgnoreThemeSettings()
        SaveManager:SetIgnoreIndexes({})
        InterfaceManager:SetFolder("RPGSimulator")
        SaveManager:SetFolder("RPGSimulator/configs")
        InterfaceManager:BuildInterfaceSection(Tabs.Settings)
        SaveManager:BuildConfigSection(Tabs.Settings)
    end)
end

-- Setup Mob Detection for Auto Farm Tab
local function setupMobDetection()
    repeat
        mobTypes = getMobTypes()
        task.wait(1)
    until #mobTypes > 0

    pcall(function()
        Tabs.AutoFarm:AddDropdown("MobTypeDropdown", {
            Title = "Mob Type",
            Description = "Select which mobs to farm",
            Values = mobTypes,
            Multi = false,
            Default = nil,
            Callback = function(value)
                selectedMobType = value
                currentTarget = nil
            end
        })
    end)

    RunService.Heartbeat:Connect(function()
        local newMobTypes = getMobTypes()
        if #newMobTypes > 0 and #newMobTypes ~= #mobTypes then
            mobTypes = newMobTypes
            pcall(function()
                Options.MobTypeDropdown:SetValues(newMobTypes)
            end)
        end
    end)
end

-- Initialize UI and Mob Detection
setupUI()
task.spawn(setupMobDetection)

-- Teleport detection for auto-execute
player.OnTeleport:Connect(function(state)
    if state == Enum.TeleportState.Started and isAutoExecuteEnabled then
        setupAutoExecute()
    end
end)

-- Check for auto-execute on script load
checkAutoExecute()

-- Hotkey
UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.F then
        toggleAutoClick(not isAutoClickEnabled)
    end
end)

-- Initial notification
Fluent:Notify({
    Title = "RPG Simulator Pro",
    Content = "Script loaded with Fluent UI!",
    Duration = 5
})

-- Select first tab
Window:SelectTab(1)

-- Load auto-load config
SaveManager:LoadAutoloadConfig()
